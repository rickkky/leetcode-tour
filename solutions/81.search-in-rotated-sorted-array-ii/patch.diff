diff --git a/solutions/81.search-in-rotated-sorted-array-ii/Cargo.toml b/solutions/81.search-in-rotated-sorted-array-ii/Cargo.toml
new file mode 100644
index 0000000..28b7e14
--- /dev/null
+++ b/solutions/81.search-in-rotated-sorted-array-ii/Cargo.toml
@@ -0,0 +1,6 @@
+[package]
+name = "search-in-rotated-sorted-array-ii"
+version = "0.1.0"
+edition = "2021"
+
+[dependencies]
diff --git a/solutions/81.search-in-rotated-sorted-array-ii/src/binary_search.ts b/solutions/81.search-in-rotated-sorted-array-ii/src/binary_search.ts
new file mode 100644
index 0000000..5aec3b3
--- /dev/null
+++ b/solutions/81.search-in-rotated-sorted-array-ii/src/binary_search.ts
@@ -0,0 +1,35 @@
+/*
+ * @lc app=leetcode.cn id=81 lang=typescript
+ *
+ * https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/
+ */
+
+// @lc code=start
+function search(nums: number[], target: number): boolean {
+    let left = 0;
+    let right = nums.length - 1;
+    while (left <= right) {
+        const mid = (left + right) >> 1;
+        if (nums[mid] === target) {
+            return true;
+        }
+        if (nums[left] === nums[mid] && nums[mid] === nums[right]) {
+            left += 1;
+            right -= 1;
+        } else if (nums[left] <= nums[mid]) {
+            if (nums[left] <= target && target < nums[mid]) {
+                right = mid - 1;
+            } else {
+                left = mid + 1;
+            }
+        } else {
+            if (nums[mid] < target && target <= nums[right]) {
+                left = mid + 1;
+            } else {
+                right = mid - 1;
+            }
+        }
+    }
+    return false;
+}
+// @lc code=end
diff --git a/solutions/81.search-in-rotated-sorted-array-ii/src/lib.rs b/solutions/81.search-in-rotated-sorted-array-ii/src/lib.rs
new file mode 100644
index 0000000..e69de29
